From 204f51fb8af00b4b828f5970f29f623502479e72 Mon Sep 17 00:00:00 2001
From: Jeff Hussmann <jeff.hussmann@gmail.com>
Date: Fri, 14 Nov 2014 11:40:49 -0600
Subject: [PATCH] releases GIL during hts_open and sam_read1

---
 pysam/calignmentfile.pyx | 23 +++++++++++++++++++----
 pysam/chtslib.pxd        |  4 ++--
 2 files changed, 21 insertions(+), 6 deletions(-)

diff --git a/pysam/calignmentfile.pyx b/pysam/calignmentfile.pyx
index bb22d3e..7b9af94 100644
--- a/pysam/calignmentfile.pyx
+++ b/pysam/calignmentfile.pyx
@@ -248,6 +248,21 @@ VALID_HEADER_ORDER = {"HD" : ("VN", "SO", "GO"),
                       "PG" : ("PN", "ID", "VN", "CL", 
                               "PP"),}
 
+cdef htsFile *hts_open_no_GIL(const char *fn, const char* mode):
+    cdef htsFile *to_return
+    
+    with nogil:
+        to_return = hts_open(fn, mode)
+
+    return to_return
+
+cdef int sam_read1_no_GIL(htsFile *fp, bam_hdr_t *h, bam1_t *b):
+    cdef int to_return
+
+    with nogil:
+        to_return = sam_read1(fp, h, b)
+
+    return to_return
 
 cdef class AlignmentFile:
     '''*(filename, mode=None, template = None,
@@ -462,7 +477,7 @@ cdef class AlignmentFile:
                 raise IOError("file `%s` not found" % filename)
 
             # try to detect errors
-            self.htsfile = hts_open(filename, bmode)
+            self.htsfile = hts_open_no_GIL(filename, bmode)
             if self.htsfile == NULL:
                 raise ValueError(
                     "could not open file (mode='%s') - "
@@ -1212,9 +1227,9 @@ cdef class AlignmentFile:
         '''
         cversion of iterator. Used by :class:`pysam.AlignmentFile.IteratorColumn`.
         '''
-        return sam_read1(self.htsfile,
-                         self.header,
-                         self.b)
+        return sam_read1_no_GIL(self.htsfile,
+                                self.header,
+                                self.b)
 
     def __next__(self):
         """
diff --git a/pysam/chtslib.pxd b/pysam/chtslib.pxd
index 3621a89..c8035e0 100644
--- a/pysam/chtslib.pxd
+++ b/pysam/chtslib.pxd
@@ -292,7 +292,7 @@ cdef extern from "htslib/hts.h" nogil:
     #     [rw]u .. uncompressed BCF
     #     [rw]z .. compressed VCF
     #     [rw]  .. uncompressed VCF
-    htsFile *hts_open(const char *fn, const char *mode)
+    htsFile *hts_open(const char *fn, const char *mode) nogil
 
     # @abstract  Close a file handle, flushing buffered data for output streams
     # @param fp  The file handle to be closed
@@ -675,7 +675,7 @@ cdef extern from "htslib/sam.h" nogil:
 
     int sam_parse1(kstring_t *s, bam_hdr_t *h, bam1_t *b)
     int sam_format1(const bam_hdr_t *h, const bam1_t *b, kstring_t *str)
-    int sam_read1(htsFile *fp, bam_hdr_t *h, bam1_t *b)
+    int sam_read1(htsFile *fp, bam_hdr_t *h, bam1_t *b) nogil
     int sam_write1(htsFile *fp, const bam_hdr_t *h, const bam1_t *b)
 
     #*************************************
