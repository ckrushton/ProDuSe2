#! /usr/bin/env python

import sys


def usage():
    """
    Prints ProDuSe's usage information to stdout
    """

    from ProDuSe.__version import __version__
    sys.stdout.write("\nProDuSe: Variant Caller for semi-degenerate barcoded adapter libraries\n")
    sys.stdout.write("Version: " + __version__ + "\n")
    sys.stdout.write("\n")
    sys.stdout.write("Usage:\tproduse <command> [options]\n")
    sys.stdout.write("\n")
    sys.stdout.write("Commands:\n")
    sys.stdout.write("adapter_predict\tIdentifies the degerate barcode used in a set of FASTQ files\n")
    sys.stdout.write("run\tRuns all steps of the ProDuSe pipeline listed below\n")
    sys.stdout.write("trim\t\tRemoves barcodes from FASTQ files\n")
    sys.stdout.write("clip\t\tClips bases which overlap in both the forward and reverse reads in paired-end sequencing\n")
    sys.stdout.write("collapse\tIdentifies duplicates,and merges duplicates into a consensus\n")
    sys.stdout.write("call\t\tIdentifies variants\n")
    sys.stdout.write("\n")
    exit(1)


def main(args):

    # Print out a usage message
    if len(args) == 1:
        usage()
        return

    command = args[1]

    # Supress the GUI, if one exists
    if len(args) == 2:
        args.append("-h")

    if command == "adapter_predict":
        from ProDuSe import adapter_predict
        adapter_predict.main(argv=args[2:])
        return

    from ProDuSe import ConfigMap, ArgMap, loadConfig, trim, collapse, ProDuSe

    ConfigMap(_func='trim', verbose=None, logStream=None)(trim)
    ConfigMap(_func='collapse', verbose=None, logStream=None)(collapse)
    ArgMap(_func=trim.__name__, verbose='verbose', logStream=None)(trim)
    ArgMap(_func=collapse.__name__, verbose='verbose', logStream=None)(collapse)

    if command == "run":
        functions = (ProDuSe, trim, collapse)
    elif command == "trim":
        functions = (trim,)
    elif command == "collapse":
        functions = (collapse,)
    elif command == "call":
        sys.stdout.write("Not yet finished")
        return
    else:
        sys.stdout.write("\nUnknown command: %s\n" % (command))
        usage()
        return

    cfgs = loadConfig(args[1:], functions, batchExpression='samples')
    global config
    while True:
        try:
            argmap = next(cfgs)
            config = argmap
            functions[0](**argmap[functions[0]])
        except ValueError:
            continue
        except StopIteration:
            break


if __name__ == "__main__":
    main(sys.argv)
